import React, { createContext, useContext, useReducer, useEffect } from 'react';

// Initial state
const initialState = {
  user: {
    name: 'John Doe',
    email: 'john@example.com',
    initials: 'JD',
    role: 'Administrator'
  },
  companyInfo: {
    name: 'Business Solutions Ltd',
    address: '123 Business St, Industry Park',
    city: 'London',
    postcode: 'W1 1AA',
    country: 'United Kingdom',
    phoneNumber: '+44 20 1234 5678',
    email: 'info@businesssolutions.com',
    website: 'www.businesssolutions.com',
    taxId: 'GB123456789',
    logo: '/logo.svg'
  },
  notifications: [],
  settings: {
    theme: 'light',
    currency: 'GBP',
    dateFormat: 'DD/MM/YYYY',
    fiscalYearStart: '01/04'
  }
};

// Action types
const ACTION_TYPES = {
  UPDATE_USER: 'UPDATE_USER',
  UPDATE_COMPANY_INFO: 'UPDATE_COMPANY_INFO',
  ADD_NOTIFICATION: 'ADD_NOTIFICATION',
  REMOVE_NOTIFICATION: 'REMOVE_NOTIFICATION',
  UPDATE_SETTINGS: 'UPDATE_SETTINGS'
};

// Reducer function
const appReducer = (state, action) => {
  switch (action.type) {
    case ACTION_TYPES.UPDATE_USER:
      return {
        ...state,
        user: {
          ...state.user,
          ...action.payload
        }
      };
    case ACTION_TYPES.UPDATE_COMPANY_INFO:
      return {
        ...state,
        companyInfo: {
          ...state.companyInfo,
          ...action.payload
        }
      };
    case ACTION_TYPES.ADD_NOTIFICATION:
      return {
        ...state,
        notifications: [...state.notifications, action.payload]
      };
    case ACTION_TYPES.REMOVE_NOTIFICATION:
      return {
        ...state,
        notifications: state.notifications.filter(
          notif => notif.id !== action.payload
        )
      };
    case ACTION_TYPES.UPDATE_SETTINGS:
      return {
        ...state,
        settings: {
          ...state.settings,
          ...action.payload
        }
      };
    default:
      return state;
  }
};

// Create context
const AppContext = createContext();

// Provider component
export const AppProvider = ({ children }) => {
  // Load state from localStorage if available
  const loadInitialState = () => {
    try {
      const savedState = localStorage.getItem('appState');
      return savedState ? JSON.parse(savedState) : initialState;
    } catch (error) {
      console.error('Error loading state from localStorage:', error);
      return initialState;
    }
  };

  const [state, dispatch] = useReducer(appReducer, loadInitialState());

  // Save state to localStorage whenever it changes
  useEffect(() => {
    try {
      localStorage.setItem('appState', JSON.stringify(state));
    } catch (error) {
      console.error('Error saving state to localStorage:', error);
    }
  }, [state]);

  // Action creators
  const updateUser = (userData) => {
    dispatch({
      type: ACTION_TYPES.UPDATE_USER,
      payload: userData
    });
  };

  const updateCompanyInfo = (companyData) => {
    dispatch({
      type: ACTION_TYPES.UPDATE_COMPANY_INFO,
      payload: companyData
    });
  };

  const addNotification = (notification) => {
    const id = Date.now().toString();
    dispatch({
      type: ACTION_TYPES.ADD_NOTIFICATION,
      payload: { id, ...notification }
    });
    
    // Auto-remove notifications after delay if they're not persistent
    if (!notification.persistent) {
      setTimeout(() => {
        removeNotification(id);
      }, notification.duration || 5000);
    }
    
    return id;
  };

  const removeNotification = (id) => {
    dispatch({
      type: ACTION_TYPES.REMOVE_NOTIFICATION,
      payload: id
    });
  };

  const updateSettings = (settingsData) => {
    dispatch({
      type: ACTION_TYPES.UPDATE_SETTINGS,
      payload: settingsData
    });
  };

  return (
    <AppContext.Provider
      value={{
        state,
        updateUser,
        updateCompanyInfo,
        addNotification,
        removeNotification,
        updateSettings
      }}
    >
      {children}
    </AppContext.Provider>
  );
};

// Custom hook for using the AppContext
export const useAppContext = () => {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useAppContext must be used within an AppProvider');
  }
  return context;
};

export default AppContext;